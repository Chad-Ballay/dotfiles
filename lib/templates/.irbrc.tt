#! /usr/bin/env ruby
# frozen_string_literal: true

require "irb/completion"

# TODO: Remove once Reline supports customized colors.
if defined? Reline::DialogRenderInfo
  Reline::DialogRenderInfo.class_eval do
    def bg_color = 40
    def pointer_bg_color = 41
  end
else
  puts "Reline undefined. Custom colors not applied."
end

# ConsoleKit (CK) - Provides IRB console utility methods.
module CK
  def self.prompt
    if defined? Hanami
      details Hanami::VERSION, Hanami.app.name.delete_suffix("::App"), Hanami.env
    elsif defined? Rails
      details Rails.version, Rails.application.class.module_parent_name, Rails.env
    else
      File.basename(`git rev-parse --show-toplevel 2> /dev/null`.strip)
          .downcase
          .then { |project| [RUBY_VERSION, project].reject(&:empty?).join "|" }
    end
  end

  def self.copy(*arguments)
    open("| pbcopy", "w") { |clipboard| clipboard.write arguments.join("\n") }
  end

  def self.locate(object, method) = object.method(method).source_location

  def self.paste = open "| pbpaste", "r", &:read

  def self.search(object, pattern) = object.methods.grep(/#{pattern}/)

  def self.details framework_version, application_name, environment
    [RUBY_VERSION, framework_version, application_name.downcase, environment].join "|"
  end

  private_class_method :details
end

IRB.conf[:EVAL_HISTORY] = 1000
IRB.conf[:HISTORY_FILE] = %(#{ENV["HOME"]}/.cache/ruby/irb/history.log)
IRB.conf[:PROMPT] ||= {}

IRB.conf[:PROMPT][:ALCHEMISTS] = {
  PROMPT_I: "[#{CK.prompt}]> ",
  PROMPT_N: "[#{CK.prompt}]| ",
  PROMPT_C: "[#{CK.prompt}]| ",
  PROMPT_S: "[#{CK.prompt}]%l ",
  RETURN: "=> %s\n"
}

IRB.conf[:PROMPT_MODE] = :ALCHEMISTS
