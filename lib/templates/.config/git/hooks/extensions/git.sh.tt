#! /usr/bin/env bash

# Label: Git Lint Check
# Description: Enforce consistent Git commits.
git_lint_check() {
  if _check_gem_dependencies "git-lint"; then
    git-lint --hook "${BASH_ARGV[0]}"
  fi
}
export -f git_lint_check

# Label: Git Trailer Cleaner
# Description: Remove unused/empty Git commit body trailers.
# Parameters: $1 (required): Commit message file path.
git_trailer_cleaner() {
  local commit_message_path="$1"

  git interpret-trailers --in-place --trim-empty "$commit_message_path"
}
export -f git_trailer_cleaner

# Label: Git Add Trailers
# Description: Dynamically add trailers based on branch description.
# Parameters: $1 (required): Commit message file path, $2 (required): The kind.
git_add_trailers() {
  local commit_message_path="$1"
  local kind="$2"
  local branch=""
  local trailers=""

  branch="$(git branch --show-current | tr -d '\n')"
  trailers="$(git config --get "branch.$branch.description" | git interpret-trailers --parse || :)"
  trailers="${trailers//$'\n'/\\n}"

  case "$kind" in
    message)
      printf "\n\n%s" "$trailers" >> "$commit_message_path";;
    template)
      if [[ -n "$trailers" ]]; then
        awk -v trailers="$trailers\n" '
          BEGIN { inserted = 0 }
          /^#/ && !inserted { print trailers; inserted = 1 }
          { print }
        ' "$commit_message_path" > "$commit_message_path.tmp" \
        && mv "$commit_message_path.tmp" "$commit_message_path"
      fi;;
  esac
}
export -f git_add_trailers
